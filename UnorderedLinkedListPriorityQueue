package data_structures;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class UnorderedLinkedListPriorityQueue<E extends Comparable<E>> implements PriorityQueue<E>,Iterable<E>{
	
	
	public class Node<E> {

		E data;
		Node<E> next;
	
	
		public Node(E obj) {
			data=obj;
			next=null;
		}
	}
	Node<E> head;
	int numitems;
	
	public UnorderedLinkedListPriorityQueue() {
		head = null;
		numitems = 0;
	}
	
	public boolean insert(E object) {
		Node<E> newNode=new Node<E>(object); 
		
		newNode.next = head;
		head = newNode;
		numitems++;
		return true;
		
	}
	

	public E remove() {
		if(isEmpty()) {										//if empty
			return null;
		}
		E highpri = head.data;
		Node<E> prev=null;
		Node<E> curr=head.next;
		while(curr!=null) {
				if(curr.data.compareTo(highpri)<0) {		//find highest priority in list		
					highpri=curr.data;
				}
				curr=curr.next;
		}		
		
		if(head.data.compareTo(highpri)==0) {					//if head is highest priority			
			head=head.next;	
			numitems--;
			return highpri;
		}
			
		curr=head;
		while((curr!=null) && (curr.data.compareTo(highpri)!=0)){			//else go through the list then remove it
			prev=curr;
			curr=curr.next;
		}
			
		curr=curr.next;
		prev.next=curr;
		numitems--;
		return highpri;
	}

	public boolean delete(E obj) {
	
		if(isEmpty()) {
			return false;
		}
		if(!contains(obj)) {
			return false;
		}
		
		Node<E> prev=null;
		Node<E> curr=head;
		
		while(curr!=null) {		
			if(curr.data.compareTo(obj)==0) {			//if compares to what we want to delete
				if(prev==null) {							//at head
					head=head.next;
					curr=head;
					numitems--;
				}
				if(curr.next==null) {
					prev.next=null;						//at end
					curr=null;
					numitems--;
				}else if(prev!=null) {					//all else
					curr=curr.next;
					prev.next=curr;
					numitems--;
				} 
			}
			if((curr!=null)&&(curr.data.compareTo(obj)!=0) ) {			//go through list
				prev=curr;
				curr=curr.next;
			}
		}
		return true;
}
	


	public E peek() {
		if(isEmpty()) {									//if empty
			return null;
		}
		Node<E> prev=head;
		Node<E> curr=head.next;
		E highpri = head.data;
		
		if(numitems==1) {									//if one thing in list
			highpri=head.data;
		}
		while(curr!=null) {									//search through all else
			if(highpri.compareTo(curr.data)<=0) {
				highpri=curr.data;
			}
			prev=curr;
			curr=curr.next;
		}
		return highpri;
	}

	
	public boolean contains(E obj) {
		if (isEmpty()) {
			return false;
		}
		Node<E> tmp;
		tmp = head;
		while (tmp != null) {						
			if (tmp.data.compareTo(obj) == 0) {			//go through list
				return true;							//return true right away if found,else keep going through
			}
			tmp = tmp.next;
		}
		return false;
	}
		

	public int size() {					//return amount of items in list
		return numitems;
	}
	
	public void clear() {				//head is nothing so list is no longer connected
		head=null;
	}
	
	public boolean isEmpty() {
		if(head==null) {
			return true;					
		}
		return false;
	}
	
	public boolean isFull() {
		return false;
	}

	public Iterator<E> iterator() {

		return new LLIteratorHelper();
	}

	private class LLIteratorHelper implements Iterator<E> {
		Node<E> curr;
		
		public LLIteratorHelper() {
			curr=head;
		}
		
		public void remove() {
			throw new UnsupportedOperationException();
		}
	
		public boolean hasNext() {
			return curr!=null;
		}

		public E next() {
			if (!hasNext()) {
				throw new NoSuchElementException();
			}
			E temp=curr.data;
			curr=curr.next;
			return temp;
		}
	}
}
